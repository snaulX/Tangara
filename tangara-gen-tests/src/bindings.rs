#[doc = r" This file was generated by tangara-gen"]
#[doc = r" All changes in this file will discard after rebuilding project"]
use std::ptr;
use std::alloc::{dealloc, Layout};
use tangara::context::{Context, Ptr};
use crate::*;

extern "C" fn MyStruct_dtor(object: Ptr) {
    unsafe {
        ptr::drop_in_place(object);
        dealloc(object, Layout::new::<MyStruct>());
    }
}

extern "C" fn MyStruct_ctor0(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let to_return = Box::new(MyStruct::new());
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn MyStruct_repeat_name(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let args_ptr = args_slice.as_mut_ptr();
        let mut prev_arg_size = 0usize;
        let this: *const MyStruct = *(args_ptr as *mut Ptr) as *const MyStruct;
        prev_arg_size = std::mem::size_of::<*const MyStruct>();
        let times: u32 = *(args_ptr.add(prev_arg_size) as *const u32);
        prev_arg_size = std::mem::size_of::<u32>();
        (*this).repeat_name(times);
        ptr::null_mut()
    }
}

extern "C" fn MyStruct_set_name(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let args_ptr = args_slice.as_mut_ptr();
        let mut prev_arg_size = 0usize;
        let this: *mut MyStruct = *(args_ptr as *mut Ptr) as *mut MyStruct;
        prev_arg_size = std::mem::size_of::<*mut MyStruct>();
        let name: &str = *(args_ptr.add(prev_arg_size) as *const &str);
        prev_arg_size = std::mem::size_of::<&str>();
        (*this).set_name(name);
        ptr::null_mut()
    }
}

extern "C" fn MyStruct_get_name(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let args_ptr = args_slice.as_mut_ptr();
        let mut prev_arg_size = 0usize;
        let this: *const MyStruct = *(args_ptr as *mut Ptr) as *const MyStruct;
        prev_arg_size = std::mem::size_of::<*const MyStruct>();
        let to_return = Box::new((*this).get_name());
        Box::into_raw(to_return) as Ptr
    }
}

#[no_mangle]
pub extern "C" fn tgLoad(ctx: &mut Context) {
    let mut MyPackage_package = ctx.add_package(15027680195549333245u64);
    let mut MyStruct_type = MyPackage_package.add_type(15379272505678659642u64);
    MyStruct_type.set_dtor(MyStruct_dtor);
    MyStruct_type.add_ctor(MyStruct_ctor0);
    MyStruct_type.add_method(12973787902168948373u64, MyStruct_repeat_name);
    MyStruct_type.add_method(51247951594155543u64, MyStruct_set_name);
    MyStruct_type.add_method(6862107747942346352u64, MyStruct_get_name);
}