#[doc = r" This file was generated by tangara-gen"]
#[doc = r" All changes in this file will discard after rebuilding project"]
use std::ptr;
use std::alloc::{dealloc, Layout};
use crate::context::*;
use crate::runtime::*;

extern "C" fn FuncTable_dtor(object: Ptr) {
    unsafe {
        ptr::drop_in_place(object);
        dealloc(object, Layout::new::<FuncTable>());
    }
}

extern "C" fn FuncTable_set_dtor(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *mut FuncTable = *(args_ptr as *mut Ptr) as *mut FuncTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*mut FuncTable>());
        let dtor: FnDtor = ptr::read(args_ptr as *const FnDtor);
        args_ptr = args_ptr.add(std::mem::size_of::<FnDtor>());
        (*this).set_dtor(dtor);
        ptr::null_mut()
    }
}

extern "C" fn FuncTable_get_dtor(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *const FuncTable = *(args_ptr as *mut Ptr) as *const FuncTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*const FuncTable>());
        let to_return = Box::new((*this).get_dtor());
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn FuncTable_add_ctor(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *mut FuncTable = *(args_ptr as *mut Ptr) as *mut FuncTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*mut FuncTable>());
        let ctor: Fn = ptr::read(args_ptr as *const Fn);
        args_ptr = args_ptr.add(std::mem::size_of::<Fn>());
        let to_return = Box::new((*this).add_ctor(ctor));
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn FuncTable_get_ctor(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *const FuncTable = *(args_ptr as *mut Ptr) as *const FuncTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*const FuncTable>());
        let index: usize = ptr::read(args_ptr as *const usize);
        args_ptr = args_ptr.add(std::mem::size_of::<usize>());
        let to_return = Box::new((*this).get_ctor(index));
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn FuncTable_add_method(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *mut FuncTable = *(args_ptr as *mut Ptr) as *mut FuncTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*mut FuncTable>());
        let id: u64 = ptr::read(args_ptr as *const u64);
        args_ptr = args_ptr.add(std::mem::size_of::<u64>());
        let func: Fn = ptr::read(args_ptr as *const Fn);
        args_ptr = args_ptr.add(std::mem::size_of::<Fn>());
        (*this).add_method(id, func);
        ptr::null_mut()
    }
}

extern "C" fn FuncTable_get_method(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *const FuncTable = *(args_ptr as *mut Ptr) as *const FuncTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*const FuncTable>());
        let id: u64 = ptr::read(args_ptr as *const u64);
        args_ptr = args_ptr.add(std::mem::size_of::<u64>());
        let to_return = Box::new((*this).get_method(id));
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn FuncTable_add_property(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *mut FuncTable = *(args_ptr as *mut Ptr) as *mut FuncTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*mut FuncTable>());
        let id: u64 = ptr::read(args_ptr as *const u64);
        args_ptr = args_ptr.add(std::mem::size_of::<u64>());
        let property: Property = ptr::read(args_ptr as *const Property);
        args_ptr = args_ptr.add(std::mem::size_of::<Property>());
        (*this).add_property(id, property);
        ptr::null_mut()
    }
}

extern "C" fn FuncTable_get_property(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *const FuncTable = *(args_ptr as *mut Ptr) as *const FuncTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*const FuncTable>());
        let id: u64 = ptr::read(args_ptr as *const u64);
        args_ptr = args_ptr.add(std::mem::size_of::<u64>());
        let to_return = Box::new((*this).get_property(id));
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn TypeTable_dtor(object: Ptr) {
    unsafe {
        ptr::drop_in_place(object);
        dealloc(object, Layout::new::<TypeTable>());
    }
}

extern "C" fn TypeTable_add_type(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *mut TypeTable = *(args_ptr as *mut Ptr) as *mut TypeTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*mut TypeTable>());
        let id: u64 = ptr::read(args_ptr as *const u64);
        args_ptr = args_ptr.add(std::mem::size_of::<u64>());
        let to_return = Box::new((*this).add_type(id));
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn TypeTable_get_type(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *const TypeTable = *(args_ptr as *mut Ptr) as *const TypeTable;
        args_ptr = args_ptr.add(std::mem::size_of::<*const TypeTable>());
        let id: u64 = ptr::read(args_ptr as *const u64);
        args_ptr = args_ptr.add(std::mem::size_of::<u64>());
        let to_return = Box::new((*this).get_type(id));
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn Context_dtor(object: Ptr) {
    unsafe {
        ptr::drop_in_place(object);
        dealloc(object, Layout::new::<Context>());
    }
}

extern "C" fn Context_add_package(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *mut Context = *(args_ptr as *mut Ptr) as *mut Context;
        args_ptr = args_ptr.add(std::mem::size_of::<*mut Context>());
        let id: u64 = ptr::read(args_ptr as *const u64);
        args_ptr = args_ptr.add(std::mem::size_of::<u64>());
        let to_return = Box::new((*this).add_package(id));
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn Context_get_package(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *const Context = *(args_ptr as *mut Ptr) as *const Context;
        args_ptr = args_ptr.add(std::mem::size_of::<*const Context>());
        let id: u64 = ptr::read(args_ptr as *const u64);
        args_ptr = args_ptr.add(std::mem::size_of::<u64>());
        let to_return = Box::new((*this).get_package(id));
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn Runtime_dtor(object: Ptr) {
    unsafe {
        ptr::drop_in_place(object);
        dealloc(object, Layout::new::<Runtime>());
    }
}

extern "C" fn Runtime_ctor0(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let to_return = Box::new(Runtime::new());
        Box::into_raw(to_return) as Ptr
    }
}

extern "C" fn Runtime_use_context(args_size: usize, args: *mut u8) -> Ptr {
    unsafe {
        let args_slice = std::slice::from_raw_parts_mut(args, args_size);
        let mut args_ptr = args_slice.as_mut_ptr();
        let this: *mut Runtime = *(args_ptr as *mut Ptr) as *mut Runtime;
        args_ptr = args_ptr.add(std::mem::size_of::<*mut Runtime>());
        let to_return = Box::new((*this).use_context());
        Box::into_raw(to_return) as Ptr
    }
}

#[no_mangle]
pub extern "C" fn tgLoad(ctx: &mut Context) {
    let mut Tangara_package = ctx.add_package(4243534419063804238u64);
    let mut FuncTable_type = Tangara_package.add_type(14662213992794848502u64);
    FuncTable_type.set_dtor(FuncTable_dtor);
    FuncTable_type.add_method(6663351687349059539u64, FuncTable_set_dtor);
    FuncTable_type.add_method(5135471825987814740u64, FuncTable_get_dtor);
    FuncTable_type.add_method(3960826605294720613u64, FuncTable_add_ctor);
    FuncTable_type.add_method(13716004744215497315u64, FuncTable_get_ctor);
    FuncTable_type.add_method(2613526156381584129u64, FuncTable_add_method);
    FuncTable_type.add_method(5591810151844744367u64, FuncTable_get_method);
    FuncTable_type.add_method(13460265176290382630u64, FuncTable_add_property);
    FuncTable_type.add_method(6787504510282495024u64, FuncTable_get_property);
    let mut TypeTable_type = Tangara_package.add_type(4384400752349026774u64);
    TypeTable_type.set_dtor(TypeTable_dtor);
    TypeTable_type.add_method(6015440599223952010u64, TypeTable_add_type);
    TypeTable_type.add_method(13515001770448872217u64, TypeTable_get_type);
    let mut Context_type = Tangara_package.add_type(13208287392294590921u64);
    Context_type.set_dtor(Context_dtor);
    Context_type.add_method(11965744347223921943u64, Context_add_package);
    Context_type.add_method(15857576503641162157u64, Context_get_package);
    let mut Runtime_type = Tangara_package.add_type(7068263599596968516u64);
    Runtime_type.set_dtor(Runtime_dtor);
    Runtime_type.add_ctor(Runtime_ctor0);
    Runtime_type.add_method(4474785944231056424u64, Runtime_use_context);
}