use tangara_highlevel::{TypeRef, Visibility};
use tangara_highlevel::builder::{PackageBuilder, TypeBuilder};

#[test]
#[cfg(feature = "builder")]
fn tangara_builder() {
    let tangara = PackageBuilder::new("Tangara")
        .set_namespace("Tangara")
        .create_class("Runtime")
            .add_constructor().build()
            .add_method("use_context")
                .return_type(TypeRef::from("Context"))
                .build()
            .build()
        .create_class("Context")
            .add_constructor()
                .set_visibility(Visibility::Internal)
                .build()
            .add_method("add_package")
                .arg(TypeRef::from("ulong"), "id")
                .return_type(TypeRef::from("TypeTable"))
                .build()
            .add_method("get_package")
                .arg(TypeRef::from("ulong"), "id")
                .return_type(TypeRef::from("TypeTable"))
                .build()
            .build()
        .create_class("TypeTable")
            .add_constructor()
                .set_visibility(Visibility::Internal)
                .build()
            .add_method("add_type")
                .arg(TypeRef::from("ulong"), "id")
                .return_type(TypeRef::from("FuncTable"))
                .build()
            .add_method("get_type")
                .arg(TypeRef::from("ulong"), "id")
                .return_type(TypeRef::from("FuncTable"))
                .build()
            .build()
        .create_alias("FnDtor", TypeRef::Fn(None, vec![TypeRef::from("Ptr")])).build()
        .create_alias(
                "Fn",
                TypeRef::Fn(
                    Some(Box::new(TypeRef::from("Ptr"))),
                    vec![TypeRef::from("ulong"), TypeRef::from("Ptr")]
                )
            ).build()
        .create_class("FuncTable")
            .add_constructor()
                .set_visibility(Visibility::Internal)
                .build()
            .add_property(TypeRef::from("FnDtor"), "Dtor").build()
            .add_method("add_ctor")
                .arg(TypeRef::from("Fn"), "ctor")
                .return_type(TypeRef::from("int"))
                .build()
            .add_method("get_ctor")
                .arg(TypeRef::from("int"), "index")
                .return_type(TypeRef::from("Fn"))
                .build()
            .add_method("add_method")
                .arg(TypeRef::from("ulong"), "id")
                .arg(TypeRef::from("Fn"), "method")
                .build()
            .add_method("get_method")
                .arg(TypeRef::from("ulong"), "id")
                .return_type(TypeRef::from("Fn"))
                .build()
            .add_method("add_property")
                .arg(TypeRef::from("ulong"), "id")
                .arg(TypeRef::from("Property"), "property")
                .build()
            .add_method("get_property")
                .arg(TypeRef::from("ulong"), "id")
                .return_type(TypeRef::from("Property"))
                .build()
            .build()
        .create_struct("Property")
            .add_property(TypeRef::Fn(Some(Box::new(TypeRef::from("Ptr"))), vec![TypeRef::from("Ptr")]), "Getter")
                .build()
            .add_property(TypeRef::Fn(None, vec![TypeRef::from("Ptr"), TypeRef::from("Ptr")]), "Setter")
                // add attribute of Option
                .build()
            .build()
        .build();
    println!("Tangara package {:?}", tangara);
}